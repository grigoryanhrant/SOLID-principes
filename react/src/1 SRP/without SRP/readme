Что делает этот код

Это функциональный компонент, в котором мы

1. извлекаем данные из удаленного источника
2. фильтруем данные
3. а затем показываем их в пользовательском интерфейсе.
4. мы также определяем состояние загрузки вызова API.

Здесь происходит много вещей:

Удаленная выборка данных
Фильтрация данных
Комплексное государственное управление
Сложный пользовательский интерфейс


1. Переместите логику обработки данных наружу
Никогда не храните свои HTTP-вызовы внутри компонента.
Это эмпирическое правило. Существует несколько стратегий,
которым вы можете следовать, чтобы удалить эти коды из компонента.

По крайней мере, вам нужно создать собственный хук и переместить
туда свою логику выборки данных. Например, мы можем создать хук с именем useGetRemoteData

2. Многоразовый хук для выборки данных
Теперь, когда мы видим наш useGetRemoteData хук,
мы видим, что этот хук делает две вещи:

Получение данных из удаленного источника
Фильтрация данных

Давайте вынесем логику получения удаленных данных в отдельный
хук с именем useHttpGetRequest, который принимает URL как компонент:

3. Разложите компоненты пользовательского интерфейса
Взгляните на наш компонент, где мы показываем информацию о пользователе.
Для этой цели мы можем создать повторно используемый UserDetails компонент:

Мы сократили наш код с 60 до 12 строк! И мы создали пять отдельных компонентов,
каждый из которых несет четкую и единую ответственность.

Давайте рассмотрим наши компоненты и посмотрим, достигли ли мы SRP:

Users.js Отвечает за отображение списка пользователей
UserDetails.js Отвечает за отображение сведений о пользователе.
useGetRemoteData.js Отвечает за фильтрацию удаленных данных
useHttpGetrequest.js Отвечает за HTTP-вызовы
LoadingReducer.js Комплексное управление состоянием

Это была простая демонстрация того, как вы можете уменьшить объем кода в каждом файле
и создавать красивые и многократно используемые компоненты с помощью SOLID.
