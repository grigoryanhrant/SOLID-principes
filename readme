SINGLE RESPONSIBILITY PRINCIPLE

Принцип единственной ответственности говорит нам, что каждый класс или компонент, функция должен
иметь единственную цель существования. Компоненты должны делать только одну вещь, и делать это хорошо.
И иметь только одну причину для изменения. Все его поведения должны быть направлены исключительно на обеспечение
этой одной функциональности.

OPEN CLOSE PRINCIPLE

Этот принцип говорит вам писать код таким образом, чтобы вы могли добавлять дополнительные функции
без изменения существующего кода. "программные сущности" обьекты, классы, функции или компоненты,
должны быть открыты для расширения но закрыты для изменения.

LISKOV SUBSTITUTION PRINCIPLE

Объекты, функции в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения
программы. Это означает, что подклассы определенного класса должны иметь возможность заменить суперкласс без нарушения
какой-либо функциональности. React не является объектно-ориентированным фреймворком, потому что это в основном JavaScript.
В контексте React основная идея этого принципа такова: Компоненты должны соблюдать какой-то контракт
По сути, это означает, что между компонентами должен быть какой-то контракт. Поэтому всякий раз, когда компонент
использует другой компонент, это не должно нарушать его функциональность или создавать какие-либо сюрпризы.
Основной вывод из этого принципа — использование TypeScript . Вы можете легко поменять местами компоненты,
если они используют один и тот же контракт.

INTERFACE SEGREGATION PRINCIPLE

Программные сущности не должны зависеть от методов, которые они не используют.
Держите свои интерфейсы небольшими и связными. Не стоит повторно использовать интерфейс вашего преобразователя данных
только потому, что это проще. Интерфейс компонента должен иметь только те свойства, которые для него важны.

DEPENDENCY INVERSION PRINCIPLE

С точки зрения объектно-ориентированного программирования основная идея этого принципа состоит в том, чтобы всегда
иметь высокоуровневый интерфейс кода с абстракцией, а не с деталями реализации. Подожди! Я знаю, о чем вы думаете:
"Я простой фронтенд-разработчик. Почему вы беспокоите меня этими сложными терминами?"
Позвольте мне сказать это просто для вас. Для приложения React этот принцип означает:
"Ни один компонент или функция не должны заботиться о том, как делается конкретная вещь".
